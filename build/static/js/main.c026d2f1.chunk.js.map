{"version":3,"sources":["theme/index.ts","components/Identicon.tsx","ethereum.ts","components/ConnectButton.tsx","components/AccountModal.tsx","components/Dialog.tsx","components/Layout.tsx","App.tsx","index.tsx"],"names":["extendTheme","fonts","heading","body","StyledIdenticon","styled","div","Identicon","ref","useRef","account","useEthers","useEffect","current","innerHTML","appendChild","Jazzicon","parseInt","slice","getBlockchain","a","detectEthereumProvider","provider","request","method","networkId","Error","ethers","providers","Web3Provider","signer","getSigner","token_migration","Contract","tokenMigration","networks","address","abi","oldSpon","testOldSponToken","newSpon","testNewSponToken","ConnectButton","handleOpenModal","useState","count","setCount","useContext","StoreContext","state","dispatch","getuserAddress","walletAddress","oldSponBalance","oldBal","BigNumber","from","pow","newSponBalance","newBal","getUserCommittedBalance","commmitBalance","type","actionType","UPDATE_COMMIT_BALANCE","commitBalance","NEW_ADDRESS","balance","newBalance","message","FINISH_FETCH","alert","getWalletAddressAndBalance","display","alignItems","background","borderRadius","py","px","color","fontSize","onClick","bg","border","_hover","borderStyle","borderColor","backgroundColor","m","height","fontWeight","mr","_active","AccountModal","isOpen","onClose","isCentered","size","pt","pb","mb","justifyContent","variant","textDecoration","mt","lineHeight","ml","alignContent","Dialog","colorScheme","Layout","useDisclosure","onOpen","isOpenDialog","onOpenDialog","onCloseDialog","isOpenDialog2","onOpenDialog2","onCloseDialog2","isOpenDialog3","onOpenDialog3","onCloseDialog3","isOpenDialog4","onOpenDialog4","onCloseDialog4","isOpenDialog5","onOpenDialog5","onCloseDialog5","isOpenDialog6","onOpenDialog6","onCloseDialog6","isOpenDialog7","onOpenDialog7","onCloseDialog7","check","setCheck","oldBalance","commitAmount","setCommitAmount","setNewBalance","initailRender","isMigrateDisable","setMigrateDisable","handleClick","mul","approve","toString","setTimeout","swapToken","updateBalance","UPDATE_BALANCE","finishFetch","timeout","clearTimeout","h","w","target","rel","style","fontStyle","href","margin","onChange","e","label","placement","value","currentTarget","test","parseFloat","placeholder","readOnly","isDisabled","window","location","reload","initialState","askConnect","askAgree","reducer","action","SET_BALANCE","ASK_CONNECT","ASK_AGREE","CHECK","temp","createContext","App","useReducer","Provider","theme","ReactDOM","render","StrictMode","DAppProvider","config","document","getElementById"],"mappings":"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","file":"static/js/main.c026d2f1.chunk.js","sourcesContent":["import { extendTheme } from \"@chakra-ui/react\";\r\n\r\nexport default extendTheme({\r\n  fonts: {\r\n    heading: \"Inter\",\r\n    body: \"Inter\",\r\n  },\r\n});\r\n","import { useEffect, useRef } from \"react\";\r\nimport { useEthers } from \"@usedapp/core\";\r\nimport Jazzicon from \"@metamask/jazzicon\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst StyledIdenticon = styled.div`\r\n  height: 1rem;\r\n  width: 1rem;\r\n  border-radius: 1.125rem;\r\n  background-color: black;\r\n`;\r\n\r\nexport default function Identicon() {\r\n  const ref = useRef<HTMLDivElement>();\r\n  const { account } = useEthers();\r\n\r\n  useEffect(() => {\r\n    if (account && ref.current) {\r\n      ref.current.innerHTML = \"\";\r\n      ref.current.appendChild(Jazzicon(16, parseInt(account.slice(2, 10), 16)));\r\n    }\r\n  }, [account]);\r\n\r\n  return <StyledIdenticon ref={ref as any} />;\r\n}\r\n","import detectEthereumProvider from '@metamask/detect-provider';\nimport {Contract, ethers} from 'ethers';\nimport tokenMigration from './config/token_migration.json';\nimport testOldSponToken from './config/testOldSponToken.json'\nimport testNewSponToken from './config/testNewSponToken.json'\n\ninterface IBlockchain {\n    tokenMigration: any,\n    oldSpon: any,\n    newSpon: any,\n}\n\nconst getBlockchain = async (): Promise<IBlockchain> => {\n    let provider = await detectEthereumProvider();\n    if (provider) {\n        await (provider as any).request({method: 'eth_requestAccounts'});\n        const networkId = await (provider as any).request({method: 'net_version'})\n        if (networkId != 97) {\n            throw new Error('Please connect to BSC testnet')\n        }\n        provider = new ethers.providers.Web3Provider((provider as any));\n        const signer = (provider as any).getSigner();\n        const token_migration = new Contract(\n            (tokenMigration as any).networks[networkId].address,\n            tokenMigration.abi,\n            signer\n        );\n        const oldSpon = new Contract(\n            (testOldSponToken as any).networks[networkId].address,\n            testOldSponToken.abi,\n            signer\n        );\n        const newSpon = new Contract(\n            (testNewSponToken as any).networks[networkId].address,\n            testNewSponToken.abi,\n            signer\n        );\n        return ({tokenMigration: token_migration, oldSpon, newSpon});\n    }\n    throw new Error('Install Metamask');\n}\n\nexport default getBlockchain;\n","import {Box, Button, Text} from \"@chakra-ui/react\";\r\nimport Identicon from \"./Identicon\";\r\nimport {useContext, useEffect, useState} from \"react\";\r\nimport {actionType, StoreContext} from \"../App\";\r\nimport getBlockchain from \"../ethereum\";\r\nimport {BigNumber} from \"ethers\";\r\n\r\n\r\ntype Props = {\r\n    handleOpenModal: any;\r\n};\r\n\r\nexport default function ConnectButton({handleOpenModal}: Props) {\r\n    const [count, setCount] = useState(0)\r\n    const {state, dispatch} = useContext(StoreContext)\r\n    useEffect(() => {\r\n        async function getWalletAddressAndBalance() {\r\n            try {\r\n                const {tokenMigration, oldSpon} = await getBlockchain();\r\n                const walletAddress = await tokenMigration.getuserAddress()\r\n                let oldBal = await tokenMigration.oldSponBalance(walletAddress)\r\n                oldBal = BigNumber.from(oldBal).div(BigNumber.from(10).pow(18))\r\n                let newBal = await tokenMigration.newSponBalance(walletAddress)\r\n                newBal = BigNumber.from(newBal).div(BigNumber.from(10).pow(18))\r\n                let commmitBalance = await tokenMigration.getUserCommittedBalance(walletAddress)\r\n                commmitBalance = BigNumber.from(commmitBalance).div(BigNumber.from(10).pow(18))\r\n                dispatch({type:actionType.UPDATE_COMMIT_BALANCE, commitBalance: commmitBalance})\r\n                dispatch({type: actionType.NEW_ADDRESS, address: walletAddress, balance: oldBal, newBalance: newBal})\r\n            } catch (e) {\r\n                if ((e as any).message == 'Install Metamask') {\r\n                    dispatch({type: actionType.FINISH_FETCH})\r\n                } else if ((e as any).message == 'Please connect to BSC testnet') {\r\n                    alert('You should connect to BSC testnet')\r\n                } else {\r\n                    alert(\"Metamask is running in background, please click on Metamask extension to continue processing procedure\")\r\n                }\r\n            }\r\n        }\r\n\r\n        getWalletAddressAndBalance()\r\n    }, [count])\r\n\r\n    async function handleConnectWallet() {\r\n        setCount((count) => count + 1)\r\n    }\r\n\r\n    return state.address ? (\r\n        <Box\r\n            display=\"flex\"\r\n            alignItems=\"center\"\r\n            background=\"gray.700\"\r\n            borderRadius=\"xl\"\r\n            py=\"0\"\r\n        >\r\n            <Box px=\"3\">\r\n                <Text color=\"white\" fontSize=\"md\">\r\n                    account\r\n                </Text>\r\n            </Box>\r\n            <Button\r\n                onClick={handleOpenModal}\r\n                bg=\"gray.800\"\r\n                border=\"1px solid transparent\"\r\n                _hover={{\r\n                    border: \"1px\",\r\n                    borderStyle: \"solid\",\r\n                    borderColor: \"blue.400\",\r\n                    backgroundColor: \"gray.700\",\r\n                }}\r\n                borderRadius=\"xl\"\r\n                m=\"1px\"\r\n                px={3}\r\n                height=\"38px\"\r\n            >\r\n                <Text color=\"white\" fontSize=\"md\" fontWeight=\"medium\" mr=\"2\">\r\n                    {state.address}\r\n                </Text>\r\n                <Identicon/>\r\n            </Button>\r\n        </Box>\r\n    ) : (\r\n        <Button\r\n            onClick={handleConnectWallet}\r\n            bg=\"blue.800\"\r\n            color=\"blue.300\"\r\n            fontSize=\"lg\"\r\n            fontWeight=\"medium\"\r\n            borderRadius=\"xl\"\r\n            border=\"1px solid transparent\"\r\n            _hover={{\r\n                borderColor: \"blue.700\",\r\n                color: \"blue.400\",\r\n            }}\r\n            _active={{\r\n                backgroundColor: \"blue.800\",\r\n                borderColor: \"blue.700\",\r\n            }}\r\n        >\r\n            Connect to a wallet\r\n        </Button>\r\n    );\r\n}\r\n","import {\r\n  Box,\r\n  Button,\r\n  Flex,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Text,\r\n} from \"@chakra-ui/react\";\r\nimport Identicon from \"./Identicon\";\r\nimport {useWeb3React} from \"@web3-react/core\";\r\nimport {useContext} from \"react\";\r\nimport {StoreContext} from \"../App\";\r\n\r\ntype Props = {\r\n  isOpen: any;\r\n  onClose: any;\r\n};\r\n\r\nexport default function AccountModal({ isOpen, onClose }: Props) {\r\n  const {state,dispatch} = useContext(StoreContext)\r\n  function handleDeactivateAccount() {\r\n    onClose();\r\n  }\r\n\r\n  return (\r\n    <Modal isOpen={isOpen} onClose={onClose} isCentered size=\"md\">\r\n      <ModalOverlay />\r\n      <ModalContent\r\n        background=\"gray.900\"\r\n        border=\"1px\"\r\n        borderStyle=\"solid\"\r\n        borderColor=\"gray.700\"\r\n        borderRadius=\"3xl\"\r\n      >\r\n        <ModalHeader color=\"white\" px={4} fontSize=\"lg\" fontWeight=\"medium\">\r\n          Account\r\n        </ModalHeader>\r\n        <ModalCloseButton\r\n          color=\"white\"\r\n          fontSize=\"sm\"\r\n          _hover={{\r\n            color: \"whiteAlpha.700\",\r\n          }}\r\n        />\r\n        <ModalBody pt={0} px={4}>\r\n          <Box\r\n            borderRadius=\"3xl\"\r\n            border=\"1px\"\r\n            borderStyle=\"solid\"\r\n            borderColor=\"gray.600\"\r\n            px={5}\r\n            pt={4}\r\n            pb={2}\r\n            mb={3}\r\n          >\r\n            <Flex justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\r\n              <Text color=\"gray.400\" fontSize=\"sm\">\r\n                Connected with MetaMask\r\n              </Text>\r\n              <Button\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n                borderColor=\"blue.800\"\r\n                borderRadius=\"3xl\"\r\n                color=\"blue.500\"\r\n                fontSize=\"13px\"\r\n                fontWeight=\"normal\"\r\n                px={2}\r\n                height=\"26px\"\r\n                _hover={{\r\n                  background: \"none\",\r\n                  borderColor: \"blue.300\",\r\n                  textDecoration: \"underline\",\r\n                }}\r\n                onClick={handleDeactivateAccount}\r\n              >\r\n                Close\r\n              </Button>\r\n            </Flex>\r\n            <Flex alignItems=\"center\" mt={2} mb={4} lineHeight={1}>\r\n              <Identicon />\r\n              <Text\r\n                color=\"white\"\r\n                fontSize=\"xl\"\r\n                fontWeight=\"semibold\"\r\n                ml=\"2\"\r\n                lineHeight=\"1.1\"\r\n              >\r\n                {`${state.balance} OSPON`}\r\n              </Text>\r\n            </Flex>\r\n            <Flex alignItems=\"center\" mt={2} mb={4} lineHeight={1}>\r\n              <Identicon />\r\n              <Text\r\n                  color=\"white\"\r\n                  fontSize=\"xl\"\r\n                  fontWeight=\"semibold\"\r\n                  ml=\"2\"\r\n                  lineHeight=\"1.1\"\r\n              >\r\n                {`${state.newBalance} NSPON`}\r\n              </Text>\r\n            </Flex>\r\n            <Flex alignItems=\"center\" mt={2} mb={4} lineHeight={1}>\r\n              <Identicon />\r\n              <Text\r\n                  color=\"white\"\r\n                  fontSize=\"xl\"\r\n                  fontWeight=\"semibold\"\r\n                  ml=\"2\"\r\n                  lineHeight=\"1.1\"\r\n              >\r\n                {`${state.commitBalance} NSPON of Committed Balance`}\r\n              </Text>\r\n            </Flex>\r\n            <Flex alignContent=\"center\" m={3}>\r\n              {/*<Button*/}\r\n              {/*  variant=\"link\"*/}\r\n              {/*  color=\"gray.400\"*/}\r\n              {/*  fontWeight=\"normal\"*/}\r\n              {/*  fontSize=\"sm\"*/}\r\n              {/*  _hover={{*/}\r\n              {/*    textDecoration: \"none\",*/}\r\n              {/*    color: \"whiteAlpha.800\",*/}\r\n              {/*  }}*/}\r\n              {/*>*/}\r\n              {/*  <CopyIcon mr={1} />*/}\r\n              {/*  Copy Address*/}\r\n              {/*</Button>*/}\r\n              {/*<Link*/}\r\n              {/*  fontSize=\"sm\"*/}\r\n              {/*  display=\"flex\"*/}\r\n              {/*  alignItems=\"center\"*/}\r\n              {/*  isExternal*/}\r\n              {/*  color=\"gray.400\"*/}\r\n              {/*  ml={6}*/}\r\n              {/*  _hover={{*/}\r\n              {/*    color: \"whiteAlpha.800\",*/}\r\n              {/*    textDecoration: \"underline\",*/}\r\n              {/*  }}*/}\r\n              {/*>*/}\r\n              {/*  <ExternalLinkIcon mr={1} />*/}\r\n              {/*  View on Explorer*/}\r\n              {/*</Link>*/}\r\n            </Flex>\r\n          </Box>\r\n        </ModalBody>\r\n\r\n        {/*<ModalFooter*/}\r\n        {/*  justifyContent=\"end\"*/}\r\n        {/*  background=\"gray.700\"*/}\r\n        {/*  borderBottomLeftRadius=\"3xl\"*/}\r\n        {/*  borderBottomRightRadius=\"3xl\"*/}\r\n        {/*  p={6}*/}\r\n        {/*>*/}\r\n        {/*  <Text*/}\r\n        {/*    color=\"white\"*/}\r\n        {/*    textAlign=\"left\"*/}\r\n        {/*    fontWeight=\"medium\"*/}\r\n        {/*    fontSize=\"md\"*/}\r\n        {/*  >*/}\r\n        {/*    Your transactions willl appear here...*/}\r\n        {/*  </Text>*/}\r\n        {/*</ModalFooter>*/}\r\n      </ModalContent>\r\n    </Modal>\r\n  );\r\n}\r\n","import {\n    Button,\n    Modal,\n    ModalBody,\n    ModalCloseButton,\n    ModalContent,\n    ModalFooter,\n    ModalHeader,\n    ModalOverlay\n} from \"@chakra-ui/react\";\nimport React from \"react\";\ninterface Iprops {\n    message: string|React.ReactNode;\n    isOpen: boolean;\n    onClose: any\n}\n\nexport default function Dialog({message, isOpen, onClose}: Iprops) {\n    return (\n        <>\n            <Modal isOpen={isOpen} onClose={onClose}>\n                <ModalOverlay/>\n                <ModalContent>\n                    <ModalHeader>Warning</ModalHeader>\n                    <ModalCloseButton/>\n                    <ModalBody>\n                        {message}\n                    </ModalBody>\n\n                    <ModalFooter>\n                        <Button colorScheme=\"blue\" mr={3} onClick={onClose}>\n                            Close\n                        </Button>\n                    </ModalFooter>\n                </ModalContent>\n            </Modal>\n        </>\n    )\n}","import {Box, Button, Checkbox, Flex, Heading, Input, Spacer, Tooltip, useDisclosure,} from \"@chakra-ui/react\";\nimport ConnectButton from \"./ConnectButton\";\nimport AccountModal from \"./AccountModal\";\nimport React, {useContext, useEffect, useRef, useState} from \"react\";\nimport {actionType, StoreContext} from \"../App\";\nimport Dialog from \"./Dialog\";\nimport getBlockchain from \"../ethereum\";\nimport {BigNumber} from \"ethers\";\n\nexport default function Layout() {\n    const {isOpen, onOpen, onClose} = useDisclosure();\n    const {\n        isOpen: isOpenDialog,\n        onOpen: onOpenDialog,\n        onClose: onCloseDialog\n    } = useDisclosure()\n    const {\n        isOpen: isOpenDialog2,\n        onOpen: onOpenDialog2,\n        onClose: onCloseDialog2\n    } = useDisclosure()\n    const {\n        isOpen: isOpenDialog3,\n        onOpen: onOpenDialog3,\n        onClose: onCloseDialog3\n    } = useDisclosure()\n    const {\n        isOpen: isOpenDialog4,\n        onOpen: onOpenDialog4,\n        onClose: onCloseDialog4\n    } = useDisclosure()\n    const {\n        isOpen: isOpenDialog5,\n        onOpen: onOpenDialog5,\n        onClose: onCloseDialog5\n    } = useDisclosure()\n    const {\n        isOpen: isOpenDialog6,\n        onOpen: onOpenDialog6,\n        onClose: onCloseDialog6\n    } = useDisclosure()\n    const {\n        isOpen: isOpenDialog7,\n        onOpen: onOpenDialog7,\n        onClose: onCloseDialog7\n    } = useDisclosure()\n    const {state, dispatch} = useContext(StoreContext)\n    const [check, setCheck] = useState(false)\n    const oldBalance = state.balance ? state.balance : 0\n    const [commitAmount, setCommitAmount] = useState(0)\n    const [newBalance, setNewBalance] = useState(0)\n    const initailRender = useRef(true)\n    const [isMigrateDisable, setMigrateDisable] = useState(false)\n\n    function handleInputAmount(e: React.FormEvent<HTMLInputElement>) {\n        const value = e.currentTarget.value\n        if (!/[0-9]/.test(value)){\n            onOpenDialog7()\n            setMigrateDisable(true)\n        } else {\n            setMigrateDisable(false)\n        }\n        setCommitAmount(parseFloat(value)||0)\n    }\n\n    function handleClick() {\n        if (!check) {\n            onOpenDialog()\n        }\n    }\n\n    function handleCheck(e: React.FormEvent<HTMLDivElement>) {\n        setCheck((check) => !check)\n    }\n\n    useEffect(() => {\n        if (!initailRender.current) {\n            onOpenDialog2()\n        }\n        initailRender.current = false;\n    }, [state.finishFetch])\n\n    useEffect(() => {\n        if(!initailRender.current){\n            const timeout = setTimeout(() => {\n                const newBalance: number = oldBalance - commitAmount;\n                setNewBalance(newBalance)\n                if (newBalance < 0) {\n                    setMigrateDisable(true)\n                    onOpenDialog4()\n                }\n                if(commitAmount<0){\n                    setMigrateDisable(true)\n                    onOpenDialog6()\n                }\n            }, 1000)\n            return () => clearTimeout(timeout)\n        }\n    }, [commitAmount])\n\n    async function handleMigrate() {\n        try {\n            const {tokenMigration, oldSpon} = await getBlockchain();\n            onOpenDialog3()\n            const balance = BigNumber.from(state.balance).mul(BigNumber.from(10).pow(18))\n            await oldSpon.approve(\"0xeA97E22234B5b5c71A8721C469273baa1ACFE4bd\", balance.toString())\n            setTimeout(async () => {\n                onOpenDialog5()\n                await tokenMigration.swapToken(BigNumber.from(commitAmount).mul(BigNumber.from(10).pow(18)));\n                setTimeout(() => {\n                    updateBalance(tokenMigration)\n                }, 20000)\n            }, 20000)\n        }catch (e) {\n            alert(`Interrupted with error ${e}`)\n        }\n    }\n\n    useEffect(()=>{\n        if(oldBalance==0){\n            setMigrateDisable(true)\n        }\n        if(oldBalance!=0){\n            setMigrateDisable(false)\n        }\n    },[oldBalance])\n\n    async function updateBalance(tokenMigration: { oldSponBalance: any, newSponBalance: any, getuserAddress: any, getUserCommittedBalance:any }) {\n        const walletAddress = await tokenMigration.getuserAddress()\n        const oldBal = await tokenMigration.oldSponBalance(walletAddress) / 10 ** 18\n        const newBal = await tokenMigration.newSponBalance(walletAddress) / 10 ** 18\n        const commmitBalance = await tokenMigration.getUserCommittedBalance(walletAddress)/10**18\n        dispatch({type: actionType.UPDATE_BALANCE, balance: oldBal, newBalance: newBal})\n        dispatch({type: actionType.UPDATE_COMMIT_BALANCE, commitBalance: commmitBalance})\n    }\n\n    function handleClear(){\n        window.location.reload()\n    }\n\n    return (\n        <Box bg=\"gray.800\" h=\"100vh\" w=\"100%\">\n            <Dialog isOpen={isOpenDialog4} onClose={onCloseDialog4}\n                    message={'Insufficient Remaining Balance'}/>\n            <Dialog isOpen={isOpenDialog7} onClose={onCloseDialog7}\n                    message={'Please input a number'}/>\n            <Dialog isOpen={isOpenDialog6} onClose={onCloseDialog6}\n                    message={'Amount should be larger than 0'}/>\n            <Dialog isOpen={isOpenDialog5} onClose={onCloseDialog5}\n                    message={'Please approve the swap, wait another 20 seconds and check your NSPON token at the button top right'}/>\n            <Dialog isOpen={isOpenDialog} onClose={onCloseDialog}\n                    message={'You should check on \"By checking this box, it means that you agree to commit SPON tokens to work for dataset generation of JURY protocol\"'}/>\n            <Dialog isOpen={isOpenDialog2} onClose={onCloseDialog2}\n                    message={<><span>You are not connecting to a Metamask account. To know how to do it, </span><a\n                        target=\"_blank\" rel=\"noopener noreferrer\"\n                        style={{color: \"blue\", fontStyle: \"italic\", textDecoration: \"underline\"}}\n                        href=\"https://academy.binance.com/en/articles/connecting-metamask-to-binance-smart-chain\">click\n                        here</a></>}/>\n            <Dialog isOpen={isOpenDialog3} onClose={onCloseDialog3}\n                    message={'Please appprove your transaction, the migration will take place within 20 seconds'}/>\n            <Flex>\n                <Spacer/>\n                <ConnectButton handleOpenModal={onOpen}/>\n                <AccountModal isOpen={isOpen} onClose={onClose}/>\n            </Flex>\n            <Box h=\"100px\" w=\"100%\"></Box>\n            <Flex w=\"100%\" justifyContent=\"center\">\n                <Box>\n                    <Heading color=\"gray.400\" size=\"xl\" margin=\"auto\">\n                        Sponsee Migration Webpage\n                    </Heading>\n                </Box>\n            </Flex>\n            <Box h=\"30px\" w=\"100%\"></Box>\n            <Flex w=\"100%\" justifyContent=\"center\">\n                <Box>\n                    <Checkbox onChange={handleCheck} color=\"gray.400\" fontSize=\"60px\">\n                        By checking this box, it means that you agree to commit SPON tokens to work for dataset generation of JURY protocol.\n                    </Checkbox>\n                </Box>\n            </Flex>\n            <Box h=\"20px\" w=\"100%\"></Box>\n            <Flex w=\"100%\" justifyContent=\"center\" alignItems=\"middle\">\n                <Tooltip label=\"Hover me\" placement=\"top-end\">\n                <Flex color=\"gray.400\" alignItems=\"center\" w=\"50%\">\n                    <Spacer/>\n                    Amount of tokens to commit\n                </Flex>\n                </Tooltip>\n                <Box w=\"50%\">\n                    <Input\n                        onClick={handleClick}\n                        onChange={handleInputAmount}\n                        placeholder={commitAmount.toString()} w=\"200px\" ml=\"50px\" color=\"gray.400\"/>\n                </Box>\n            </Flex>\n            <Box h=\"20px\" w=\"100%\"></Box>\n            <Flex w=\"100%\" justifyContent=\"center\" alignItems=\"middle\">\n                <Flex color=\"gray.400\" alignItems=\"center\" w=\"50%\">\n                    <Spacer/>\n                    Old balance\n                </Flex>\n                <Box w=\"50%\">\n                    <Input onClick={handleClick} readOnly={true} placeholder={oldBalance.toString()} w=\"200px\" ml=\"50px\"\n                           color=\"gray.400\"/>\n                </Box>\n            </Flex>\n            <Box h=\"20px\" w=\"100%\"></Box>\n            <Flex w=\"100%\" justifyContent=\"center\" alignItems=\"middle\">\n                <Flex color=\"gray.400\" alignItems=\"center\" w=\"50%\">\n                    <Spacer/>\n                    New balance\n                </Flex>\n                <Box w=\"50%\">\n                    <Input onClick={handleClick} readOnly={true} placeholder={newBalance.toString()} w=\"200px\" ml=\"50px\"\n                           color=\"gray.400\"/>\n                </Box>\n            </Flex>\n            <Box h=\"20px\" w=\"100%\"></Box>\n            <Flex w=\"100%\" justifyContent=\"center\" alignItems=\"middle\">\n                <Flex color=\"gray.400\" alignItems=\"center\" w=\"50%\">\n                    <Spacer/>\n                    New commit balance\n                </Flex>\n                <Flex w=\"50%\">\n                    <Input readOnly={true} placeholder={commitAmount.toString()} w=\"200px\" ml=\"50px\" color=\"gray.400\"/>\n                    <Flex color=\"gray.400\" alignItems=\"center\" ml=\"20px\">\n                    </Flex>\n                </Flex>\n            </Flex>\n            <Box h=\"20px\" w=\"100%\"></Box>\n            <Flex w=\"100%\" justifyContent=\"center\" alignItems=\"middle\">\n                <Button w=\"100px\" isDisabled={isMigrateDisable} onClick={handleMigrate}>Migrate</Button>\n                <Button w=\"100px\" ml=\"15px\" onClick={handleClear}>Clear</Button>\n            </Flex>\n        </Box>\n    );\n}\n","import {ChakraProvider} from \"@chakra-ui/react\";\nimport theme from \"./theme\";\nimport Layout from \"./components/Layout\";\nimport \"@fontsource/inter\";\nimport {createContext, Dispatch, useReducer} from \"react\";\nimport {BigNumber} from \"ethers\";\n\ninterface State {\n    message?: string;\n    balance?: number;\n    address?: string | null;\n    askConnect?: boolean;\n    askAgree?: boolean;\n    check?: boolean;\n    finishFetch?: boolean;\n    newBalance?: number;\n    commitBalance?:number|BigNumber;\n}\n\nconst initialState: State = {\n    address: null,\n    balance: 0,\n    message: \"\",\n    askConnect: false,\n    askAgree: false,\n    check: false,\n    finishFetch: false,\n    newBalance: 0,\n    commitBalance: 0,\n}\n\ninterface Actions {\n    type: actionType,\n    message?: string;\n    balance?: number;\n    address?: string | null;\n    askConnect?: boolean;\n    askAgree?: boolean;\n    check?: boolean;\n    finishFetch?: boolean;\n    newBalance?: number;\n    commitBalance?:number|BigNumber;\n}\n\nexport enum actionType {\n    NEW_ADDRESS = 'NEW_ADDRESS',\n    SET_BALANCE = 'SET_BALANCE',\n    ASK_CONNECT = 'ASK_CONNECT',\n    ASK_AGREE = 'ASK_AGREE',\n    CHECK = 'CHECK',\n    FINISH_FETCH = 'FINISH_FETCH',\n    UPDATE_BALANCE = 'UPDATE_BALANCE',\n    UPDATE_COMMIT_BALANCE='UPDATE_COMMIT_BALANCE',\n}\n\nconst reducer = (state: State, action: Actions) => {\n    switch (action.type) {\n        case actionType.NEW_ADDRESS:\n            return {\n                ...state,\n                address: action.address,\n                balance: action.balance,\n                newBalance: action.newBalance\n            }\n        case actionType.SET_BALANCE:\n            return {\n                ...state,\n                ...action.balance && {balance: action.balance},\n            }\n        case actionType.ASK_CONNECT:\n            return {\n                ...state,\n                askConnect: true\n            }\n        case actionType.ASK_AGREE:\n            return {\n                ...state,\n                askAgree: true\n            }\n        case actionType.CHECK:\n            return {\n                ...state,\n                check: true\n            }\n        case actionType.FINISH_FETCH:\n            const temp = state.finishFetch\n            return {\n                ...state,\n                finishFetch: !temp\n            }\n        case actionType.UPDATE_BALANCE:\n            return {\n                ...state,\n                balance: action.balance,\n                newBalance: action.newBalance\n            }\n        case actionType.UPDATE_COMMIT_BALANCE:\n            return {\n                ...state,\n                commitBalance: action.commitBalance\n            }\n    }\n}\n\ninterface ContextProps {\n    state: State;\n    dispatch: Dispatch<Actions>\n}\n\nexport const StoreContext = createContext({} as ContextProps);\n\nfunction App() {\n    const [state, dispatch] = useReducer(reducer, initialState)\n    return (\n        <StoreContext.Provider value={{state, dispatch}}>\n            <ChakraProvider theme={theme}>\n                <Layout/>\n            </ChakraProvider>\n        </StoreContext.Provider>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { DAppProvider } from \"@usedapp/core\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <DAppProvider config={{}}>\n      <App />\n    </DAppProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}