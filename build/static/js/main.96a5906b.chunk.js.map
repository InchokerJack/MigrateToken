{"version":3,"sources":["theme/index.ts","components/Identicon.tsx","ethereum.ts","components/ConnectButton.tsx","components/AccountModal.tsx","components/ModalDialog.tsx","components/Layout.tsx","App.tsx","index.tsx"],"names":["extendTheme","fonts","heading","body","StyledIdenticon","styled","div","Identicon","ref","useRef","account","useEthers","useEffect","current","innerHTML","appendChild","Jazzicon","parseInt","slice","getBlockchain","Promise","resolve","reject","a","detectEthereumProvider","provider","request","method","networkId","ethers","providers","Web3Provider","signer","getSigner","token_migration","Contract","tokenMigration","networks","address","abi","oldSpon","testOldSponToken","InjectedConnector","supportedChainIds","ConnectButton","handleOpenModal","setETHBalance","useContext","StoreContext","state","dispatch","getuserAddress","walletAddress","oldSponBalance","type","actionType","NEW_ADDRESS","metaData","getWalletAddressAndBalance","getBalance","display","alignItems","background","borderRadius","py","px","color","fontSize","onClick","bg","border","_hover","borderStyle","borderColor","backgroundColor","m","height","fontWeight","mr","_active","AccountModal","isOpen","onClose","eTHBalance","useWeb3React","deactivate","activate","isCentered","size","pt","pb","mb","justifyContent","variant","textDecoration","mt","lineHeight","ml","balance","alignContent","Copy","isExternal","ExternalLink","borderBottomLeftRadius","borderBottomRightRadius","p","textAlign","ModalDialog","message","open","useDisclosure","onOpen","colorScheme","Layout","useState","h","w","margin","placeholder","initialState","askConnect","askAgree","reducer","action","SET_BALANCE","ASK_CONNECT","ASK_AGREE","createContext","App","useReducer","Provider","value","theme","ReactDOM","render","StrictMode","DAppProvider","config","document","getElementById"],"mappings":"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","file":"static/js/main.96a5906b.chunk.js","sourcesContent":["import { extendTheme } from \"@chakra-ui/react\";\r\n\r\nexport default extendTheme({\r\n  fonts: {\r\n    heading: \"Inter\",\r\n    body: \"Inter\",\r\n  },\r\n});\r\n","import { useEffect, useRef } from \"react\";\r\nimport { useEthers } from \"@usedapp/core\";\r\nimport Jazzicon from \"@metamask/jazzicon\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst StyledIdenticon = styled.div`\r\n  height: 1rem;\r\n  width: 1rem;\r\n  border-radius: 1.125rem;\r\n  background-color: black;\r\n`;\r\n\r\nexport default function Identicon() {\r\n  const ref = useRef<HTMLDivElement>();\r\n  const { account } = useEthers();\r\n\r\n  useEffect(() => {\r\n    if (account && ref.current) {\r\n      ref.current.innerHTML = \"\";\r\n      ref.current.appendChild(Jazzicon(16, parseInt(account.slice(2, 10), 16)));\r\n    }\r\n  }, [account]);\r\n\r\n  return <StyledIdenticon ref={ref as any} />;\r\n}\r\n","import detectEthereumProvider from '@metamask/detect-provider';\nimport { ethers, Contract } from 'ethers';\nimport tokenMigration from './config/token_migration.json';\nimport testOldSponToken from './config/testOldSponToken.json'\n\ninterface IBlockchain {\n    tokenMigration: any,oldSpon:any\n}\n\nconst getBlockchain = (): Promise<IBlockchain> =>\n  new Promise( async (resolve, reject) => {\n    let provider = await detectEthereumProvider();\n    if(provider) {\n      await (provider as any).request({ method: 'eth_requestAccounts' });\n      const networkId = await (provider as any).request({ method: 'net_version' })\n      provider = new ethers.providers.Web3Provider((provider as any));\n      const signer = (provider as any).getSigner();\n      const token_migration = new Contract(\n          (tokenMigration as any).networks[networkId].address,\n        tokenMigration.abi,\n        signer\n      );\n        const oldSpon = new Contract(\n            (testOldSponToken as any).networks[networkId].address,\n            testOldSponToken.abi,\n            signer\n        );\n      resolve({tokenMigration:token_migration,oldSpon});\n      return;\n    }\n    reject('Install Metamask');\n  });\n\nexport default getBlockchain;\n","import {Box, Button, Text} from \"@chakra-ui/react\";\r\nimport Identicon from \"./Identicon\";\r\nimport {InjectedConnector} from '@web3-react/injected-connector'\r\nimport {useContext, useEffect} from \"react\";\r\nimport {actionType, StoreContext} from \"../App\";\r\nimport getBlockchain from \"../ethereum\";\r\n\r\nexport const injected = new InjectedConnector({\r\n    supportedChainIds: [1, 3, 4, 5, 42],\r\n})\r\n\r\ntype Props = {\r\n    handleOpenModal: any;\r\n    setETHBalance: any;\r\n};\r\n\r\nexport default function ConnectButton({handleOpenModal, setETHBalance}: Props) {\r\n    // const {activate, deactivate} = useWeb3React()\r\n    // const web3 = new Web3(Web3.givenProvider || BSCTestNetUrl);\r\n    const {state, dispatch} = useContext(StoreContext)\r\n    useEffect(() => {\r\n        async function getWalletAddressAndBalance() {\r\n            const {tokenMigration, oldSpon} = await getBlockchain();\r\n            const walletAddress = await tokenMigration.getuserAddress()\r\n            const oldBal = await tokenMigration.oldSponBalance(walletAddress)\r\n            dispatch({type:actionType.NEW_ADDRESS, metaData: {address:walletAddress}})\r\n        }\r\n        getWalletAddressAndBalance()\r\n    })\r\n\r\n    // async function handleConnectWallet() {\r\n    //     await connect();\r\n    // }\r\n    //\r\n    // async function connect() {\r\n    //     try {\r\n    //         await activate(injected)\r\n    //     } catch (ex) {\r\n    //         console.log(ex)\r\n    //     }\r\n    // }\r\n\r\n    useEffect(() => {\r\n        async function getBalance() {\r\n            try {\r\n\r\n                //     const oldBal = await tokenMigration.oldSponBalance(walletAddress)\r\n                //     const result2 = await tokenMigration.getUserCommittedBalance(walletAddress)\r\n                //     console.log((result2/10**18).toString())\r\n                //     // oldBal = (parseInt(oldBal) / 10 ** 18).toString()\r\n                //     let newBal = await tokenMigration.newSponBalance(walletAddress)\r\n                //     newBal = (parseInt(newBal) / 10 ** 18).toString()\r\n                //     console.log('new balance is', newBal)\r\n                //     console.log('old balance is', oldBal.toString())\r\n                //     const result = await oldSpon.approve(\"0xeA97E22234B5b5c71A8721C469273baa1ACFE4bd\", oldBal.toString()  )\r\n                //     console.log('result is', result)\r\n                //     setTimeout(async ()=>{await tokenMigration.swapToken(BigNumber.from(500).mul(BigNumber.from(10).pow(18)));},10000)\r\n                //\r\n            } catch (e) {\r\n                alert('Please login Metamask')\r\n            }\r\n        }\r\n\r\n        getBalance()\r\n    }, [])\r\n\r\n    // async function disconnect() {\r\n    //     try {\r\n    //         deactivate()\r\n    //     } catch (ex) {\r\n    //         console.log(ex)\r\n    //     }\r\n    // }\r\n\r\n    return state.address ? (\r\n        <Box\r\n            display=\"flex\"\r\n            alignItems=\"center\"\r\n            background=\"gray.700\"\r\n            borderRadius=\"xl\"\r\n            py=\"0\"\r\n        >\r\n            <Box px=\"3\">\r\n                <Text color=\"white\" fontSize=\"md\">\r\n                    account\r\n                </Text>\r\n            </Box>\r\n            <Button\r\n                onClick={handleOpenModal}\r\n                bg=\"gray.800\"\r\n                border=\"1px solid transparent\"\r\n                _hover={{\r\n                    border: \"1px\",\r\n                    borderStyle: \"solid\",\r\n                    borderColor: \"blue.400\",\r\n                    backgroundColor: \"gray.700\",\r\n                }}\r\n                borderRadius=\"xl\"\r\n                m=\"1px\"\r\n                px={3}\r\n                height=\"38px\"\r\n            >\r\n                <Text color=\"white\" fontSize=\"md\" fontWeight=\"medium\" mr=\"2\">\r\n                    {state.address}\r\n                </Text>\r\n                <Identicon/>\r\n            </Button>\r\n        </Box>\r\n    ) : (\r\n        <Button\r\n            // onClick={handleConnectWallet}\r\n            bg=\"blue.800\"\r\n            color=\"blue.300\"\r\n            fontSize=\"lg\"\r\n            fontWeight=\"medium\"\r\n            borderRadius=\"xl\"\r\n            border=\"1px solid transparent\"\r\n            _hover={{\r\n                borderColor: \"blue.700\",\r\n                color: \"blue.400\",\r\n            }}\r\n            _active={{\r\n                backgroundColor: \"blue.800\",\r\n                borderColor: \"blue.700\",\r\n            }}\r\n        >\r\n            Connect to a wallet\r\n        </Button>\r\n    );\r\n}\r\n","import {\r\n  Box,\r\n  Button,\r\n  Flex,\r\n  Link,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Text,\r\n} from \"@chakra-ui/react\";\r\nimport { ExternalLinkIcon, CopyIcon } from \"@chakra-ui/icons\";\r\nimport Identicon from \"./Identicon\";\r\nimport {useWeb3React} from \"@web3-react/core\";\r\nimport {useContext} from \"react\";\r\nimport {StoreContext} from \"../App\";\r\n\r\ntype Props = {\r\n  isOpen: any;\r\n  onClose: any;\r\n  eTHBalance: any;\r\n};\r\n\r\nexport default function AccountModal({ isOpen, onClose, eTHBalance }: Props) {\r\n  const {activate, deactivate } = useWeb3React()\r\n  const {state,dispatch} = useContext(StoreContext)\r\n  function handleDeactivateAccount() {\r\n    deactivate();\r\n  }\r\n\r\n  return (\r\n    <Modal isOpen={isOpen} onClose={onClose} isCentered size=\"md\">\r\n      <ModalOverlay />\r\n      <ModalContent\r\n        background=\"gray.900\"\r\n        border=\"1px\"\r\n        borderStyle=\"solid\"\r\n        borderColor=\"gray.700\"\r\n        borderRadius=\"3xl\"\r\n      >\r\n        <ModalHeader color=\"white\" px={4} fontSize=\"lg\" fontWeight=\"medium\">\r\n          Account\r\n        </ModalHeader>\r\n        <ModalCloseButton\r\n          color=\"white\"\r\n          fontSize=\"sm\"\r\n          _hover={{\r\n            color: \"whiteAlpha.700\",\r\n          }}\r\n        />\r\n        <ModalBody pt={0} px={4}>\r\n          <Box\r\n            borderRadius=\"3xl\"\r\n            border=\"1px\"\r\n            borderStyle=\"solid\"\r\n            borderColor=\"gray.600\"\r\n            px={5}\r\n            pt={4}\r\n            pb={2}\r\n            mb={3}\r\n          >\r\n            <Flex justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\r\n              <Text color=\"gray.400\" fontSize=\"sm\">\r\n                Connected with MetaMask\r\n              </Text>\r\n              <Button\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n                borderColor=\"blue.800\"\r\n                borderRadius=\"3xl\"\r\n                color=\"blue.500\"\r\n                fontSize=\"13px\"\r\n                fontWeight=\"normal\"\r\n                px={2}\r\n                height=\"26px\"\r\n                _hover={{\r\n                  background: \"none\",\r\n                  borderColor: \"blue.300\",\r\n                  textDecoration: \"underline\",\r\n                }}\r\n                onClick={handleDeactivateAccount}\r\n              >\r\n                Change\r\n              </Button>\r\n            </Flex>\r\n            <Flex alignItems=\"center\" mt={2} mb={4} lineHeight={1}>\r\n              <Identicon />\r\n              <Text\r\n                color=\"white\"\r\n                fontSize=\"xl\"\r\n                fontWeight=\"semibold\"\r\n                ml=\"2\"\r\n                lineHeight=\"1.1\"\r\n              >\r\n                {state.balance}\r\n              </Text>\r\n            </Flex>\r\n            <Flex alignContent=\"center\" m={3}>\r\n              <Button\r\n                variant=\"link\"\r\n                color=\"gray.400\"\r\n                fontWeight=\"normal\"\r\n                fontSize=\"sm\"\r\n                _hover={{\r\n                  textDecoration: \"none\",\r\n                  color: \"whiteAlpha.800\",\r\n                }}\r\n              >\r\n                <CopyIcon mr={1} />\r\n                Copy Address\r\n              </Button>\r\n              <Link\r\n                fontSize=\"sm\"\r\n                display=\"flex\"\r\n                alignItems=\"center\"\r\n                isExternal\r\n                color=\"gray.400\"\r\n                ml={6}\r\n                _hover={{\r\n                  color: \"whiteAlpha.800\",\r\n                  textDecoration: \"underline\",\r\n                }}\r\n              >\r\n                <ExternalLinkIcon mr={1} />\r\n                View on Explorer\r\n              </Link>\r\n            </Flex>\r\n          </Box>\r\n        </ModalBody>\r\n\r\n        <ModalFooter\r\n          justifyContent=\"end\"\r\n          background=\"gray.700\"\r\n          borderBottomLeftRadius=\"3xl\"\r\n          borderBottomRightRadius=\"3xl\"\r\n          p={6}\r\n        >\r\n          <Text\r\n            color=\"white\"\r\n            textAlign=\"left\"\r\n            fontWeight=\"medium\"\r\n            fontSize=\"md\"\r\n          >\r\n            Your transactions willl appear here...\r\n          </Text>\r\n        </ModalFooter>\r\n      </ModalContent>\r\n    </Modal>\r\n  );\r\n}\r\n","import {\n    Button,\n    Modal,\n    ModalBody,\n    ModalCloseButton,\n    ModalContent,\n    ModalFooter,\n    ModalHeader,\n    ModalOverlay,\n    useDisclosure\n} from \"@chakra-ui/react\";\nimport {useEffect} from \"react\";\ninterface Iprops {\n    message:string;\n    open: boolean\n}\nexport default function ModalDialog({message,open}:Iprops) {\n    const {isOpen, onOpen, onClose} = useDisclosure()\n    useEffect(()=>{\n        if(open){\n      onOpen()\n        }\n    },[])\n    return (\n        <>\n            <Modal isOpen={isOpen} onClose={onClose}>\n                <ModalOverlay/>\n                <ModalContent>\n                    <ModalHeader>Warning</ModalHeader>\n                    <ModalCloseButton/>\n                    <ModalBody>\n                        {message}\n                    </ModalBody>\n\n                    <ModalFooter>\n                        <Button colorScheme=\"blue\" mr={3} onClick={onClose}>\n                            Close\n                        </Button>\n                    </ModalFooter>\n                </ModalContent>\n            </Modal>\n        </>\n    )\n}","import {\n    Box, Button,\n    Checkbox,\n    Flex,\n    Heading,\n    Input,\n    Spacer,\n    useDisclosure,\n} from \"@chakra-ui/react\";\nimport ConnectButton from \"./ConnectButton\";\nimport AccountModal from \"./AccountModal\";\nimport {useContext, useState} from \"react\";\nimport {StoreContext} from \"../App\";\nimport ModalDialog from \"./ModalDialog\";\n\nexport default function Layout() {\n    const {isOpen, onOpen, onClose} = useDisclosure();\n    const [eTHBalance, setETHBalance] = useState(0);\n    const {state,dispatch} = useContext(StoreContext)\n    return (\n        <Box bg=\"gray.800\" h=\"100vh\" w=\"100%\">\n        <ModalDialog open={false} message={'You are not connected. You should connect to Metamask'}/>\n        <ModalDialog open={false} message={'You are not connected. You should connect to Metamask'}/>\n        <ModalDialog open={false} message={'You are not connected. You should connect to Metamask'}/>\n            <Flex>\n                <Spacer/>\n                <ConnectButton handleOpenModal={onOpen} setETHBalance={setETHBalance}/>\n                <AccountModal isOpen={isOpen} onClose={onClose} eTHBalance={eTHBalance}/>\n            </Flex>\n            <Box h=\"100px\" w=\"100%\"></Box>\n            <Flex w=\"100%\" justifyContent=\"center\">\n                <Box>\n                    <Heading color=\"gray.400\" size=\"xl\" margin=\"auto\">\n                        Migration Webpage\n                    </Heading>\n                </Box>\n            </Flex>\n            <Box h=\"30px\" w=\"100%\"></Box>\n            <Flex w=\"100%\" justifyContent=\"center\">\n                <Box>\n                    <Checkbox color=\"gray.400\" fontSize=\"60px\">\n                        Ask token holder to commit to JURY protocol\n                    </Checkbox>\n                </Box>\n            </Flex>\n            <Box h=\"20px\" w=\"100%\"></Box>\n            <Flex w=\"100%\" justifyContent=\"center\" alignItems=\"middle\">\n                <Flex color=\"gray.400\" alignItems=\"center\" w=\"50%\">\n                    <Spacer/>\n                    Amount of tokens to commit\n                </Flex>\n                <Box w=\"50%\">\n                    <Input placeholder=\"0\" w=\"200px\" ml=\"50px\" color=\"gray.400\"/>\n                </Box>\n            </Flex>\n            <Box h=\"20px\" w=\"100%\"></Box>\n            <Flex w=\"100%\" justifyContent=\"center\" alignItems=\"middle\">\n                <Flex color=\"gray.400\" alignItems=\"center\" w=\"50%\">\n                    <Spacer/>\n                    Old balance\n                </Flex>\n                <Box w=\"50%\">\n                    {/*<Input placeholder={(state.balance).toString()} w=\"200px\" ml=\"50px\" color=\"gray.400\"/>*/}\n                </Box>\n            </Flex>\n            <Box h=\"20px\" w=\"100%\"></Box>\n            <Flex w=\"100%\" justifyContent=\"center\" alignItems=\"middle\">\n                <Flex color=\"gray.400\" alignItems=\"center\" w=\"50%\">\n                    <Spacer/>\n                    New balance\n                </Flex>\n                <Box w=\"50%\">\n                    <Input placeholder=\"0\" w=\"200px\" ml=\"50px\" color=\"gray.400\"/>\n                </Box>\n            </Flex>\n            <Box h=\"20px\" w=\"100%\"></Box>\n            <Flex w=\"100%\" justifyContent=\"center\" alignItems=\"middle\">\n                <Flex color=\"gray.400\" alignItems=\"center\" w=\"50%\">\n                    <Spacer/>\n                    New commit balance\n                </Flex>\n                <Flex w=\"50%\">\n                    <Input placeholder=\"0\" w=\"200px\" ml=\"50px\" color=\"gray.400\"/>\n                    <Flex color=\"gray.400\" alignItems=\"center\" ml=\"20px\">\n                        store in database\n                    </Flex>\n                </Flex>\n            </Flex>\n            <Box h=\"20px\" w=\"100%\"></Box>\n            <Flex w=\"100%\" justifyContent=\"center\" alignItems=\"middle\">\n                <Button w=\"100px\">Migrate</Button>\n            </Flex>\n        </Box>\n    );\n}\n","import {ChakraProvider} from \"@chakra-ui/react\";\nimport theme from \"./theme\";\nimport Layout from \"./components/Layout\";\nimport \"@fontsource/inter\";\nimport {createContext, Dispatch, useReducer} from \"react\";\n\ninterface State {\n    message?: string;\n    balance?: number;\n    address?: string | null;\n    askConnect?: boolean;\n    askAgree?: boolean;\n}\n\nconst initialState: State = {\n    address: null,\n    balance: 0,\n    message: \"\",\n    askConnect: false,\n    askAgree: false,\n}\n\ninterface Actions {\n    type: actionType,\n    metaData: State,\n}\n\nexport enum actionType {\n    NEW_ADDRESS = 'NEW_ADDRESS',\n    SET_BALANCE = 'SET_BALANCE',\n    ASK_CONNECT = 'ASK_CONNECT',\n    ASK_AGREE = 'ASK_AGREE',\n}\n\nconst reducer = (state: State, action: Actions) => {\n    switch (action.type) {\n        case actionType.NEW_ADDRESS:\n            return {\n                ...state,\n                address: action.metaData.address,\n                message: action.metaData.message,\n                balance: action.metaData.balance\n            }\n        case actionType.SET_BALANCE:\n            return {\n                ...state,\n                ...action.metaData.balance && {balance: action.metaData.balance},\n            }\n        case actionType.ASK_CONNECT:\n            return {\n                ...state,\n                askConnect: true\n            }\n        case actionType.ASK_AGREE:\n            return {\n                ...state,\n                askAgree: true\n            }\n    }\n}\n\ninterface ContextProps {\n    state: State;\n    dispatch: Dispatch<Actions>\n}\n\nexport const StoreContext = createContext({} as ContextProps);\n\nfunction App() {\n    const [state, dispatch] = useReducer(reducer, initialState)\n    return (\n        <StoreContext.Provider value={{state, dispatch}}>\n            <ChakraProvider theme={theme}>\n                <Layout/>\n            </ChakraProvider>\n        </StoreContext.Provider>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { DAppProvider } from \"@usedapp/core\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <DAppProvider config={{}}>\n      <App />\n    </DAppProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}